---
import type { Post } from '@/content/configTypes.d.ts'
const { posts }: { posts: Post[] } = Astro.props as { posts: Post[] }

const postsTags = new Set(posts.map((post) => post.data.tag))
console.log(postsTags)
---

<aside class="space-y-6">
  <button id="asc-desc" class="bg-red-400 px-2 py-1">Asc / Desc</button>
  <button id="view-all" class="bg-red-400 px-2 py-1">View all</button>

  <hr />

  <ul>
    {
      posts.map((post) => (
        <li>
          <input id={`chk-post-${post.data.id}`} class="posts-checkbox" type="checkbox" checked />
          <label for={`chk-post-${post.data.id}`}>{post.data.title}</label>
        </li>
      ))
    }
  </ul>

  <hr />

  <ul>
    {Array.from(postsTags).map((tag) => (
      <li>
        <input id={`chk-tag-post-${tag}`} class="posts-tags-checkbox" type="checkbox" checked />
        <label for={`chk-tag-post-${tag}`}>{tag}</label>
      </li>
    ))}
  </ul>

</aside>

<style>
  .posts-checkbox, .posts-tags-checkbox {
    display: none;
  }

  label {
    cursor: pointer;
    position: relative;
    display: inline-block;
    overflow: hidden;
  }

  label::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 30%;
    background: rgb(232, 55, 55);
    transform: translateY(-50%) translateX(-100%);
    transition: transform 0.4s ease;
  }

  .posts-checkbox:not(:checked) + label::after,
  .posts-tags-checkbox:not(:checked) + label::after {
      transform: translateY(-50%) translateX(0);
  }
</style>

<script>
  const $ = (el: string): HTMLElement | null => document.querySelector(el)
  const $$ = (els: string): NodeListOf<Element> => document.querySelectorAll(els)

  const $section = $(`#content`)
  const $ascDescBtn = $(`#asc-desc`)
  const $viewAllBtn = $(`#view-all`)

  const $$allPosts = $$('.card')
  const $$postCheckboxes = $$('.posts-checkbox') as NodeListOf<HTMLInputElement>
  const $$postTagsCheckboxes = $$('.posts-tags-checkbox') as NodeListOf<HTMLInputElement>

  // REVERSE posts
  $ascDescBtn?.addEventListener('click', () => {
    const $$posts = $$('.card')
    const reversedposts = Array.from($$posts).reverse()
      reversedposts.forEach((post) => {
        $section?.appendChild(post)
      })
  })

  // VIEW ALL
  $viewAllBtn?.addEventListener('click', () => {
    $$allPosts.forEach((post) => {
      post.removeAttribute('hidden')
    })
    $$postCheckboxes.forEach((checkbox) => {
      checkbox.checked = true
    })
  })

  // SELECT 1 post
  $$postCheckboxes.forEach((checkbox) => {
    checkbox.addEventListener('click', () => {
      const $$posts = $$('.card')
      const selectedPost = Array.from($$posts).filter((post) => checkbox.id === `chk-${post.id}`)
      selectedPost.forEach((post) => {
        post.hasAttribute('hidden') ? post.removeAttribute('hidden') : post.setAttribute('hidden', 'true')
      })
    })
  })

  // SELECT 1 tag
  $$postTagsCheckboxes.forEach((checkbox) => {
    checkbox.addEventListener('click', () => {
      const $$posts = $$('.card')
      const selectedPost = Array.from($$posts).filter((post) => {
        const element = post as HTMLElement
        return checkbox.id === `chk-tag-${element.dataset.tag}`
      })
      selectedPost.forEach((post) => {
        post.hasAttribute('hidden') ? post.removeAttribute('hidden') : post.setAttribute('hidden', 'true')
      })
    })
  })
</script>