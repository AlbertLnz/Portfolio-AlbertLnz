---
import SortNumeric from '@/assets/symbols/SortNumeric.astro'
import TwoXTwoGrid from '@/assets/symbols/TwoXTwoGrid.astro'
import type { Post } from '@/content/configTypes.d.ts'
import { blogCardAssignColor } from '@/data/blogCardAssignColor'
const { posts }: { posts: Post[] } = Astro.props as { posts: Post[] }

const postsTags = new Set(posts.map((post) => post.data.tag))
---

<aside class="space-y-4">
  <button id="asc-desc" class="flex items-center justify-center px-2 py-1 w-full rounded-md gap-x-2 bg-slate-300 dark:bg-slate-700 transition-colors duration-500 hover:bg-green-400 dark:hover:bg-green-800">
    <SortNumeric class="size-6 fill-white/80" />
    <p class="text-[16px] text-primary-light dark:text-primary-dark">Asc / Desc</p>
  </button>
  <button id="view-all" class="flex items-center justify-center px-2 py-1 w-full rounded-md gap-x-2 bg-slate-300 dark:bg-slate-700 transition-colors duration-500 hover:bg-green-400 dark:hover:bg-green-800">
    <TwoXTwoGrid id="gridIcon" class="size-4 fill-white/80 stroke-1 stroke-black/80"/>
    <p class="text-[16px] text-primary-light dark:text-primary-dark">View All</p>
  </button>

  <hr />

  <ul>
    {
      posts.map((post) => (
        <li class="text-primary-light dark:text-primary-dark">
          <input id={`chk-post-${post.data.id}`} class="posts-checkbox" type="checkbox" checked />
          <label for={`chk-post-${post.data.id}`}>{post.data.title}</label>
        </li>
      ))
    }
  </ul>

  <hr />

  <ul class="space-y-2 text-primary-light dark:text-primary-dark">
    {Array.from(postsTags).map((tag) => {
      const colorTag = blogCardAssignColor[tag].background

      return (
      <li class="flex items-center gap-x-2">
        <div class={`size-2 rounded-full ${colorTag}`}></div>
        <input id={`chk-tag-post-${tag}`} class="posts-tags-checkbox" type="checkbox" checked />
        <label for={`chk-tag-post-${tag}`}>{tag}</label>
      </li>
    )
    })}
  </ul>

</aside>

<style>
  .posts-checkbox, .posts-tags-checkbox {
    display: none;
  }

  label {
    cursor: pointer;
    position: relative;
    display: inline-block;
    overflow: hidden;
  }

  label::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 30%;
    background: rgb(232, 55, 55);
    transform: translateY(-50%) translateX(-100%);
    transition: transform 0.4s ease;
  }

  .posts-checkbox:not(:checked) + label::after,
  .posts-tags-checkbox:not(:checked) + label::after {
      transform: translateY(-50%) translateX(0);
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const $ = (el: string): HTMLElement | null => document.querySelector(el)
    const $$ = (els: string): NodeListOf<Element> => document.querySelectorAll(els)
  
    const $gridIcon = $(`#gridIcon`)

    const $section = $(`#content`)
    const $ascDescBtn = $(`#asc-desc`)
    const $viewAllBtn = $(`#view-all`)

    const $$allPosts = $$('.card')
    const $$postCheckboxes = $$('.posts-checkbox') as NodeListOf<HTMLInputElement>
    const $$postTagsCheckboxes = $$('.posts-tags-checkbox') as NodeListOf<HTMLInputElement>
  
    // REVERSE posts
    $ascDescBtn?.addEventListener('click', () => {
      const $$posts = $$('.card')
      const reversedposts = Array.from($$posts).reverse()
        reversedposts.forEach((post) => {
          $section?.appendChild(post)
        })
    })
  
    // VIEW ALL
    $viewAllBtn?.addEventListener('click', () => {
      $$allPosts.forEach((post) => {
        post.removeAttribute('hidden')
      })
      $$postCheckboxes.forEach((checkbox) => {
        checkbox.checked = true
      })
      $$postTagsCheckboxes.forEach((checkbox) => {
        checkbox.checked = true
      })
  })
  
    function updatePostsVisibility() {
      const $$posts = $$('.card')
  
      $$posts.forEach((post) => {
        const postElement = post as HTMLElement
        
        const postCheckbox = $(`#chk-${post.id}`) as HTMLInputElement
        const isPostChecked = postCheckbox && postCheckbox.checked
  
        const tagCheckbox = $(`#chk-tag-${postElement.dataset.tag}`) as HTMLInputElement
        const isTagChecked = tagCheckbox && tagCheckbox.checked
  
        if (isPostChecked && isTagChecked) {
          postElement.removeAttribute('hidden')
        } else {
          postElement.setAttribute('hidden', 'true')
        }
      })
    }
  
    $$postCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('click', () => {
        updatePostsVisibility()
      })
    })
  
    $$postTagsCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('click', () => {
        updatePostsVisibility()
      })
    })
  })
</script>