---
import { PRODUCTION, GITHUB_API_BASE_URL, GITHUB_README_API } from "astro:env/server"
import { githubScore } from '@/data/githubScore'

if (PRODUCTION) {
  await fetchData()
} else {
  githubScore.forEach((item) => {
    item.value = '100'
  })
}


function getLevelRankIcon(htmlString: string, option: string) {
  const regex = new RegExp(`<text[^>]*\\sdata-testid="${option}"[^>]*>([^<]*)<\\/text>`)
  const match = htmlString.match(regex)
  return match ? match[1].trim() : null
}

async function fetchData() {
  try {
    const res = await fetch(`${GITHUB_API_BASE_URL}/albertlnz`) // only repositories
    const data = await res.json()
    const res2 = await fetch(`${GITHUB_README_API}albertlnz`) // the rest
    const data2 = await res2.text()
    
    githubScore.forEach((item) => {
      item.option === 'repositories' ? item.value = data.public_repos : item.value = getLevelRankIcon(data2, item.tagId) as string
    })

  } catch (error) {
    console.error('Error fetching data:', error)
  }
}

---

<div class="relative flex flex-col w-full h-full">

  <h3 class="pb-4 text-secondary-light dark:text-tertiary-dark">
    <span class="">
      <a href="https://github.com/AlbertLnz" target="_blank">
        My GitHub
      </a>
    </span>
    Stats
  </h3>

  <ul class="flex-1 flex gap-x-8 justify-around mx-2">
    {githubScore.map((item) => {
      if (item.show) {
        return (
          <li class="text-primary-light dark:text-primary-dark text-xs h-full flex flex-col items-center justify-start gap-y-2">
            <p>{<item.icon class="size-5 fill-black/90 dark:fill-[#d1d5db]" />}</p>
            <p class="font-bold">{item.value}</p>
          </li>
        )
      }
    })}
  </ul>

  <p class="absolute bottom-0 right-0 text-tertiary-light dark:text-tertiary-dark text-[10px] italic">Using Astro Server Islands</p>
</div>

