---
import TitleComponent from "../components/TitleComponent.astro"
import JobsComponent from "../components/JobsComponent.jsx"

import { getI18N } from "../i18n";
const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })
---

<TitleComponent title={i18n?.BENTO_TITLES.JOBS} />
<div class="wrapper flex overflow-x-auto snap-x cursor-grab scroll-smooth">
    <div class="slider flex flex-col justify-center items-center snap-center min-w-full h-full">
        <JobsComponent currentLocale={currentLocale} id=4 />
    </div>
    <div class="slider flex flex-col justify-center items-center snap-center min-w-full h-full">
        <JobsComponent currentLocale={currentLocale} id=3 />
    </div>
    <div class="slider flex flex-col justify-center items-center snap-center min-w-full h-full">
        <JobsComponent currentLocale={currentLocale} id=2 />
    </div>
    <div class="slider flex flex-col justify-center items-center snap-center min-w-full h-full">
        <JobsComponent currentLocale={currentLocale} id=1 />
    </div>
</div>

<style>
    .wrapper {
    scrollbar-width: none;
    }

    .wrapper::-webkit-scrollbar {
    display: none;
    }

    .slider {
        -webkit-user-select: none;
    }
</style>

<script>
    document.addEventListener("astro:page-load", () => {
        const wrapper = document.querySelector('.wrapper') as HTMLElement | null;
        let isDragging = false;
        let startX = 0;
        let scrollLeft = 0;

        wrapper?.addEventListener('mousedown', (e) => {
            const mouseEvent = e as MouseEvent;
            isDragging = true;
            startX = mouseEvent.pageX - (wrapper?.offsetLeft || 0);
            scrollLeft = wrapper?.scrollLeft || 0;
            if (wrapper) {
                wrapper.style.cursor = 'grabbing';
            }
        });

        wrapper?.addEventListener('mouseleave', () => {
            isDragging = false;
        });

        window.addEventListener('mouseup', () => {
            isDragging = false;
            if (wrapper) {
                wrapper.style.cursor = 'grab';
            }
        });

        wrapper?.addEventListener('mousemove', (e) => {
            if (!isDragging || !wrapper) return;
            const mouseEvent = e as MouseEvent;
            const x = mouseEvent.pageX - (wrapper.offsetLeft || 0);
            const walk = (x - startX) * 1.5;

            wrapper.scrollLeft = scrollLeft - walk;
        });
    });

</script>