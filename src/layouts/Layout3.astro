---
import { ViewTransitions } from 'astro:transitions';
interface Props {
	title?: string;
  description?: string;
}

const { title, description } = Astro.props;
const { currentLocale } = Astro
---
<!doctype html>
<html lang={currentLocale}> 
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
        <ViewTransitions />
	</head>
	<body class="dark">
        <div id="cards" class="w-screen h-screen bg-black p-4">
            <section class="card bg-rose-900 h-full" transition:name="hero">
                    <div class="card-border"></div>
                    <div class="card-content flex">
                        <slot />
                    </div>
            </section>
        </div>
	</body>
</html>

<script>
  const cardsContainer = document.getElementById("cards");

  if (cardsContainer) {
      cardsContainer.onmousemove = (e) => {
          const cardList = document.getElementsByClassName("card");

          for (const cardElement of cardList) {
              const card = cardElement as HTMLElement; // Explicitly cast to HTMLElement
              const rect = card.getBoundingClientRect(),
                  x = e.clientX - rect.left,
                  y = e.clientY - rect.top;

              card.style.setProperty("--mouse-x", `${x}px`);
              card.style.setProperty("--mouse-y", `${y}px`);
          }
      };
  }
</script>

<style>
#cards:hover > .card::after {
  opacity: 1;
}

.card {
  /* background-color: rgba(255, 255, 255, 0.1); */
  /* background-color: rgba(23,23,25, 0.1); */
  border-radius: 10px; 
  display: flex;
  position: relative;
  color: white;
}

.card:hover::before {
  opacity: 1;
}

.card::before,
.card::after {
  border-radius: inherit;
  content: "";
  height: 100%;
  left: 0px;
  opacity: 0;
  position: absolute;
  top: 0px;
  transition: opacity 500ms;
  width: 100%;
}

.card::before {
  background: radial-gradient(
    400px circle at var(--mouse-x) var(--mouse-y), 
    rgba(255, 255, 255, 0.06),
    transparent 40%
  );
  z-index: 1;
}

.card::after {  
  background: radial-gradient(
    600px circle at var(--mouse-x) var(--mouse-y), 
    rgba(255, 255, 255, 0.4),
    transparent 40%
  );
  z-index: 0;
}

.card > .card-content {
  background-color: rgb(23, 23, 23);
  border-radius: inherit;
  inset: 1px;
  position: absolute;
  z-index: 2;
}
</style>