---
import { tools } from '@/data/tools'
import { homePageToolsTranslations } from '@/i18n/translations'

const MAX_TOOLS_ITEMS = 99
const toolsTranslations = homePageToolsTranslations(Astro.url)
---

<section
  id='tools'
  class={`
    bg-section-bg-light dark:bg-section-bg-dark
    border-2 border-section-primary-border-light dark:border-section-primary-border-dark
    relative
  `}
  transition:name='tools'
>
  <ul class='flex flex-wrap w-full h-full'>
    {
      tools.slice(0, MAX_TOOLS_ITEMS).map((tool) => {
        return (
          <li class=''>
            <button
              id={`toolBtn-${tool.name}`}
              class='flex items-center justify-center hover:scale-110 p-1 transition-all duration-300 opacity-70 hover:opacity-100'
            >
              {<tool.component class='size-5' />}
            </button>
            <div
              id={`info-container-toolBtn-${tool.name}`}
              class='hidden md:absolute left-0 top-0 mx-4 h-full items-center justify-center gap-x-2 py-2 md:py-0'
            >
              {<tool.component class='size-14' />}
              <p class='text-[11px] text-secondary-light dark:text-tertiary-dark'>
                {toolsTranslations[`${tool.name}`]}
              </p>
            </div>
          </li>
        )
      })
    }
  </ul>
  <button
    id='back-btn'
    class={`
    text-tertiary-light hover:text-black dark:text-tertiary-dark dark:hover:text-white
    hidden absolute top-0 left-0 p-4 text-xs
  `}
  >
    Back
  </button>
  <p
    class={`
    text-tertiary-light dark:text-tertiary-dark
    absolute text-xs bottom-0 right-0 p-2
    `}
  >
    {toolsTranslations['tool_note']}
  </p>
</section>

<script>
  document.addEventListener('astro:page-load', () => {
    const $ = (el: string): HTMLElement | null => document.querySelector(el)
    const $$ = (els: string): NodeListOf<Element> =>
      document.querySelectorAll(els)

    const $$buttons: NodeListOf<HTMLButtonElement> = $$(
      '[id^="toolBtn-"]'
    ) as NodeListOf<HTMLButtonElement>
    const $backBtn: HTMLElement | null = $(`#back-btn`)
    const $$infoContainers = $$('[id^="info-container-"]')

    $$buttons.forEach((button: HTMLButtonElement) => {
      button.addEventListener('click', () => {
        const $infoContainer: HTMLElement | null = $(
          `#info-container-${button.id}`
        )

        $$buttons.forEach((btn) => {
          btn.classList.add('hidden')
        })

        $infoContainer?.classList.remove('hidden')
        $infoContainer?.classList.add('flex')
        $backBtn?.classList.remove('hidden')
      })

      $backBtn?.addEventListener('click', () => {
        const toggleVisibility = (element: Element, show: boolean) => {
          element.classList.toggle('hidden', !show)
          element.classList.toggle('flex', show)
        }

        $$buttons.forEach((btn) => toggleVisibility(btn, true))
        $$infoContainers.forEach((infoContainer) =>
          toggleVisibility(infoContainer, false)
        )
        toggleVisibility($backBtn, false)
      })
    })
  })
</script>
