---
import { IP_INFO_API, OPEN_WEATHER_API_URL, OPEN_WEATHER_API_KEY } from "astro:env/server"
import { assignIconWeatherArr } from '@/data/weatherIcon.js'

async function fetchData() {
  try {
    const res = await fetch(IP_INFO_API)
    const data = await res.json()
    const res2 = await fetch(`${OPEN_WEATHER_API_URL}q=${data.city}&units=metric&appid=${OPEN_WEATHER_API_KEY}`)
    const data2 = await res2.json()

    return {
      timestamp: data2.dt,
      timezone: data2.timezone,
      city: data2.name,
      temp: data2.main.temp,
      humidity: data2.main.humidity,
      wind: data2.wind.speed,
      mainWeather: data2.weather[0].main,
      descriptWeather: data2.weather[0].description,
    }
  } catch (error) {
    console.error('Error fetching data:', error)
    return {}
  }
}
const {
  timestamp = null,
  timezone = null,
  city = "Unknown",
  temp = null,
  humidity = null,
  wind = null,
  mainWeather = "unknown",
  descriptWeather = "unknown"
} = await fetchData() || {}

const timezoneHours = timezone / 3600
const totalSecondsInDay = 24 * 60 * 60
const date = new Date(timestamp * 1000)
const hours = date.getUTCHours() + timezoneHours
const isDay = hours < 21 ? 'day' : 'night'
const hoursString = hours.toString().padStart(2, '0')
const minutes = date.getUTCMinutes().toString().padStart(2, '0')
const secondsElapsedToday = timestamp % totalSecondsInDay
const progress = (secondsElapsedToday / totalSecondsInDay) * 100
const roundTemp = Math.round(temp)

let descriptWeatherFilter = ''
const iconsWithDoubleIcons = ['clear sky', 'few clouds', 'scattered clouds']
if (iconsWithDoubleIcons.includes(descriptWeather)){
  descriptWeatherFilter = isDay === 'day' ? `${descriptWeather}_day` : `${descriptWeather}_night`
} else {
  descriptWeatherFilter = descriptWeather
}

let iconWeather = assignIconWeatherArr.find((weather) => weather.name === descriptWeatherFilter) as typeof assignIconWeatherArr[0]
if (!iconWeather) iconWeather = assignIconWeatherArr.find((weather) => weather.name === 'unknown') as typeof assignIconWeatherArr[0]
---

<section id="weather" class="p-0 flex items-center justify-center bg-gradient-to-b from-[#074A8E] to-[#5596D8] dark:from-[#020518] dark:to-[#283555]">

  <div class="grid grid-cols-[70%_30%]  rounded-[22px] w-full h-full  py-2 px-4">

    <h6 class="flex self-center text-[14px] font-semibold">{city}</h6>
    {<iconWeather.component class="size-6 flex justify-self-end" color="#fff" />}

    <h5 class="ml-1 text-[24px] font-bold">{roundTemp}º</h5>
    <p class="flex justify-self-end self-start font-medium">{mainWeather}</p>

    <p class="ml-1 text-[10px] flex self-center">· Wind:</p>
    <p class="text-[10px] flex justify-self-end self-center">{wind} mph</p>

    <p class="ml-1 text-[10px] flex self-center">· Humidity:</p>
    <p class="text-[10px] flex justify-self-end self-center">{humidity} %</p>

    <p class="ml-1 text-[10px] flex self-center">· {hoursString}:{minutes}h / 24h:</p>
    <p class="text-[10px] flex justify-self-end self-center"></p>

    <div class="flex items-center justify-center place-content-center rounded-full bg-[#336BA3] dark:bg-[#0E1730] col-span-2 relative">
      <div class="absolute top-0 left-0 h-full bg-[#85A7C9] dark:bg-[#606374] rounded-full" style={`width: ${progress}%`}></div>
    </div>
  </div>
</section>
